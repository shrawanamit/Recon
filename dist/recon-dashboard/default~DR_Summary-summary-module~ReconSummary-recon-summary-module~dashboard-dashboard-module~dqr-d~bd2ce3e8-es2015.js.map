{"version":3,"sources":["./node_modules/ngx-mat-daterange-picker/esm2015/ngx-mat-daterange-picker.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyM;AAC1K;AACyD;AACC;AACnB;AAC3B;AACc;AACuB;AACd;AACL;AACJ;AACE;AACE;;AAE7D;AACA;AACA,cAAc,oCAAoC;AAClD;AACA,WAAW,EAAE;AACb,iBAAiB,4DAAc;AAC/B;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,gCAAgC,4CAAO;AACvC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gCAAgC,iDAAiD;AACjF;AACA;AACA;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB;AACA;AACA;AACA,KAAK,2BAA2B,OAAO,oDAAM,iBAAiB,GAAG;AACjE,KAAK,2BAA2B,OAAO,oDAAM,iBAAiB;AAC9D;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,+BAA+B;AACxD,uBAAuB;AACvB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB;AACA;AACA;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA,WAAW,EAAE;AACb;AACA;AACA,oBAAoB,mEAAO;AAC3B,QAAQ,iEAAK,SAAS,iEAAK,EAAE,uCAAuC;AACpE,QAAQ,iEAAK,UAAU,iEAAK,EAAE,uCAAuC;AACrE,QAAQ,sEAAU,kBAAkB,iEAAK;AACzC,YAAY,mEAAO;AACnB;AACA,QAAQ,sEAAU,cAAc,mEAAO,iBAAiB,iEAAK,EAAE,aAAa;AAC5E;AACA;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,YAAY;AACzF,+DAA+D,aAAa;AAC5E;AACA;AACA;AACA;AACA;AACA,0DAA0D,oBAAoB,oBAAoB,aAAa,yBAAyB,6BAA6B,gBAAgB,aAAa,2BAA2B,+BAA+B,kBAAkB,gBAAgB,YAAY,+CAA+C,eAAe,gBAAgB,kBAAkB,YAAY,sBAAsB,oBAAoB,oBAAoB,aAAa,yBAAyB,6BAA6B,gBAAgB,qBAAqB,+GAA+G,uGAAuG,gBAAgB,kBAAkB,8BAA8B,gCAAgC,WAAW;AAC73B;AACA,+BAA+B,+DAAiB;AAChD,aAAa,IAAI;AACjB;AACA;AACA;AACA,KAAK,0BAA0B;AAC/B,KAAK,2BAA2B;AAChC,KAAK,OAAO,+DAAU;AACtB;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,oBAAoB;AACpB;AACA,mBAAmB,EAAE;AACrB,8CAA8C;AAC9C,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,mCAAmC,mEAAe;AAClD;AACA;AACA;AACA,kBAAkB,gEAAS;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,kCAAkC,kEAAa;AAC/C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,4BAA4B,+DAAU;AACtC,mBAAmB,kEAAc;AACjC;AACA;AACA;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB;AACA;AACA;AACA,KAAK,OAAO,4DAAO,EAAE;AACrB,KAAK,OAAO,sDAAQ;AACpB;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,0DAAY;AACxD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,wCAAwC,KAAK,KAAK,GAAG;AACrD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oDAAoD,gBAAgB,wBAAwB,uBAAuB,cAAc,sBAAsB,gXAAgX,WAAW,YAAY;AAC9hB;AACA;AACA;AACA;AACA,oBAAoB,wDAAQ;AAC5B;AACA,iCAAiC,qEAAuB;AACxD,aAAa,IAAI;AACjB;AACA;AACA;AACA,KAAK,OAAO,+DAAiB,EAAE;AAC/B,KAAK,+BAA+B;AACpC,KAAK,0BAA0B;AAC/B,KAAK,2BAA2B;AAChC,KAAK,OAAO,wDAAQ;AACpB;AACA;AACA,qBAAqB,OAAO,uDAAS,4BAA4B;AACjE,gCAAgC,OAAO,oDAAM,EAAE;AAC/C,eAAe,OAAO,mDAAK,EAAE;AAC7B;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA,sCAAsC,0DAAY;AAClD;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,uBAAuB;AACvB;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wBAAwB;AACxB;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;;AAEA;AACA;AACA,aAAa,aAAa;AAC1B,qDAAqD,gCAAgC;AACrF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kDAAkD,mBAAmB,YAAY,gBAAgB,WAAW,eAAe,gBAAgB,iCAAiC,sBAAsB,gBAAgB;AAClN,iCAAiC,qEAAuB;AACxD,aAAa,IAAI;AACjB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,OAAO,uDAAS,SAAS,wEAAW,IAAI;AAC3D,0BAA0B,OAAO,oDAAM,EAAE;AACzC,oBAAoB,OAAO,mDAAK,EAAE;AAClC,mBAAmB,OAAO,mDAAK,EAAE;AACjC,eAAe,OAAO,mDAAK,EAAE;AAC7B,eAAe,OAAO,mDAAK,EAAE;AAC7B;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA,iCAAiC,0DAAY;AAC7C;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB;AAChB;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA,4EAA4E,oBAAoB;AAChG;AACA;AACA,oDAAoD,qBAAqB,SAAS,UAAU,6BAA6B,aAAa,WAAW,eAAe,mBAAmB,cAAc,yBAAyB,sBAAsB,qBAAqB,iBAAiB,mCAAmC,mBAAmB,WAAW;AACvV,iCAAiC,qEAAuB;AACxD,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA,eAAe,OAAO,mDAAK,EAAE;AAC7B,qBAAqB,OAAO,oDAAM,EAAE;AACpC;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA,oBAAoB,4DAAY;AAChC,oBAAoB,+EAAkB;AACtC,oBAAoB,gFAAmB;AACvC,oBAAoB,0EAAmB;AACvC,oBAAoB,uEAAc;AAClC,oBAAoB,yEAAe;AACnC,oBAAoB,2EAAgB;AACpC,oBAAoB,kEAAa;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,aAAa,IAAI;AACjB;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;;AAEuN;AACvN","file":"default~DR_Summary-summary-module~ReconSummary-recon-summary-module~dashboard-dashboard-module~dqr-d~bd2ce3e8-es2015.js","sourcesContent":["import { Injectable, Inject, InjectionToken, Component, ViewEncapsulation, Injector, ViewChild, Output, EventEmitter, Input, ChangeDetectionStrategy, ChangeDetectorRef, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { animate, state, style, transition, trigger, group } from '@angular/animations';\nimport { OverlayRef, Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ComponentPortal, PortalInjector } from '@angular/cdk/portal';\nimport { takeWhile } from 'rxjs/operators';\nimport { DatePipe, CommonModule } from '@angular/common';\nimport { MatCalendar, MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst DATE = new InjectionToken('date');\nclass RangeStoreService {\n    /**\n     * @param {?} _fromDate\n     * @param {?} _toDate\n     */\n    constructor(_fromDate, _toDate) {\n        this._fromDate = _fromDate;\n        this._toDate = _toDate;\n        this.rangeUpdate$ = new Subject();\n    }\n    /**\n     * @return {?}\n     */\n    get fromDate() {\n        return this._fromDate;\n    }\n    /**\n     * @return {?}\n     */\n    get toDate() {\n        return this._toDate;\n    }\n    /**\n     * @param {?=} fromDate\n     * @param {?=} toDate\n     * @return {?}\n     */\n    updateRange(fromDate = this._fromDate, toDate = this._toDate) {\n        this._fromDate = fromDate;\n        this._toDate = toDate;\n        this.rangeUpdate$.next({ fromDate: this._fromDate, toDate: this._toDate });\n    }\n}\nRangeStoreService.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nRangeStoreService.ctorParameters = () => [\n    { type: Date, decorators: [{ type: Inject, args: [DATE,] }] },\n    { type: Date, decorators: [{ type: Inject, args: [DATE,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass ConfigStoreService {\n    constructor() {\n        this.defaultOptions = {\n            excludeWeekends: false,\n            animation: true,\n            locale: 'en-US',\n            fromMinMax: { fromDate: null, toDate: null },\n            toMinMax: { fromDate: null, toDate: null }\n        };\n    }\n    /**\n     * @return {?}\n     */\n    get ngxDrpOptions() {\n        return this._ngxDrpOptions;\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    set ngxDrpOptions(options) {\n        this._ngxDrpOptions = Object.assign({}, this.defaultOptions, options);\n    }\n}\nConfigStoreService.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nConfigStoreService.ctorParameters = () => [];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst pickerOverlayAnimations = {\n    /** Transforms the height of the picker overlay content. */\n    transformPanel: trigger('transformPickerOverlay', [\n        state('void', style({ opacity: 0, transform: 'scale(1, 0)' })),\n        state('enter', style({ opacity: 1, transform: 'scale(1, 1)' })),\n        transition('void => enter', group([\n            animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n        ])),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 })))\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass PickerOverlayComponent {\n    /**\n     * @param {?} rangeStoreService\n     * @param {?} configStoreService\n     * @param {?} overlayRef\n     */\n    constructor(rangeStoreService, configStoreService, overlayRef) {\n        this.rangeStoreService = rangeStoreService;\n        this.configStoreService = configStoreService;\n        this.overlayRef = overlayRef;\n        this.presets = [];\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.fromDate = this.rangeStoreService.fromDate;\n        this.toDate = this.rangeStoreService.toDate;\n        this.startDatePrefix = this.configStoreService.ngxDrpOptions.startDatePrefix || 'FROM:';\n        this.endDatePrefix = this.configStoreService.ngxDrpOptions.endDatePrefix || 'TO:';\n        this.applyLabel = this.configStoreService.ngxDrpOptions.applyLabel || 'Apply';\n        this.cancelLabel = this.configStoreService.ngxDrpOptions.cancelLabel || 'Cancel';\n        this.presets = this.configStoreService.ngxDrpOptions.presets;\n        this.shouldAnimate = this.configStoreService.ngxDrpOptions.animation\n            ? 'enter'\n            : 'noop';\n        ({\n            fromDate: this.fromMinDate,\n            toDate: this.fromMaxDate\n        } = this.configStoreService.ngxDrpOptions.fromMinMax);\n        ({\n            fromDate: this.toMinDate,\n            toDate: this.toMaxDate\n        } = this.configStoreService.ngxDrpOptions.toMinMax);\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    updateFromDate(date) {\n        this.fromDate = date;\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    updateToDate(date) {\n        this.toDate = date;\n    }\n    /**\n     * @param {?} presetItem\n     * @return {?}\n     */\n    updateRangeByPreset(presetItem) {\n        this.updateFromDate(presetItem.range.fromDate);\n        this.updateToDate(presetItem.range.toDate);\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    applyNewDates(e) {\n        this.rangeStoreService.updateRange(this.fromDate, this.toDate);\n        this.disposeOverLay();\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    discardNewDates(e) {\n        // this.rangeStoreService.updateRange();\n        this.disposeOverLay();\n    }\n    /**\n     * @return {?}\n     */\n    disposeOverLay() {\n        this.overlayRef.dispose();\n    }\n}\nPickerOverlayComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'ngx-mat-drp-picker-overlay',\n                template: `<div [@transformPickerOverlay]=\"shouldAnimate\" class=\"ngx-mat-drp-calendar-container\">\n\n  <div class=\"ngx-mat-drp-calendar-item\">\n    <calendar-wrapper \n    [prefixLabel]=\"startDatePrefix\"\n    [selectedDate]=\"fromDate\"\n    [minDate]=\"fromMinDate\"\n    [maxDate]=\"fromMaxDate\"\n    (selectedDateChange)=\"updateFromDate($event)\">\n  </calendar-wrapper>\n  </div>\n  <div class=\"ngx-mat-drp-calendar-item\">\n    <calendar-wrapper \n    [prefixLabel]=\"endDatePrefix\"\n    [selectedDate]=\"toDate\"\n    [minDate]=\"toMinDate\"\n    [maxDate]=\"toMaxDate\" \n    (selectedDateChange)=\"updateToDate($event)\">\n  </calendar-wrapper>\n  </div>\n  <div class=\"ngx-mat-drp-calendar-item\">\n    <div class=\"ngx-mat-drp-menu\">\n      <mat-drp-presets [presets]=\"presets\" (presetChanged)=\"updateRangeByPreset($event)\"></mat-drp-presets>\n      <div class=\"ngx-mat-drp-controls\">\n        <button mat-button color=\"primary\" (click)=\"applyNewDates($event)\">{{applyLabel}}</button>\n        <button mat-button (click)=\"discardNewDates($event)\">{{cancelLabel}}</button>\n      </div>\n    </div>\n  </div>\n</div>\n`,\n                styles: [`.ngx-mat-drp-calendar-container{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-pack:distribute;justify-content:space-around;min-width:650px;height:300px}.ngx-mat-drp-calendar-item{-ms-flex-preferred-size:33.33%;flex-basis:33.33%;min-width:210px;padding:1em;font-family:Roboto,\"Helvetica Neue\",sans-serif;font-size:14px;font-weight:400}.ngx-mat-drp-menu{height:100%}.ngx-mat-drp-controls{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-pack:distribute;justify-content:space-around;margin:10% auto}.ngx-mat-drp-overlay{-webkit-box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);background:#fff;border-radius:2px}.ngx-mat-drp-overlay-backdrop{background-color:rgba(0,0,0,.2);opacity:.2}`],\n                animations: [pickerOverlayAnimations.transformPanel],\n                encapsulation: ViewEncapsulation.None\n            },] },\n];\n/** @nocollapse */\nPickerOverlayComponent.ctorParameters = () => [\n    { type: RangeStoreService },\n    { type: ConfigStoreService },\n    { type: OverlayRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst DEFAULT_CONFIG = {\n    panelClass: 'ngx-mat-drp-overlay',\n    hasBackdrop: true,\n    backdropClass: 'ngx-mat-drp-overlay-backdrop',\n    shouldCloseOnBackdropClick: true\n};\nclass CalendarOverlayService {\n    /**\n     * @param {?} overlay\n     * @param {?} injector\n     */\n    constructor(overlay, injector) {\n        this.overlay = overlay;\n        this.injector = injector;\n    }\n    /**\n     * @param {?=} config\n     * @param {?=} hostElemRef\n     * @return {?}\n     */\n    open(config = {}, hostElemRef) {\n        this.hostElemRef = hostElemRef;\n        /** @type {?} */\n        const overlayConfig = Object.assign({}, DEFAULT_CONFIG, config);\n        /** @type {?} */\n        const overlayRef = this.createOverlay(overlayConfig);\n        /** @type {?} */\n        const portalInjector = this.createInjector(overlayRef);\n        /** @type {?} */\n        const calendarPortal = new ComponentPortal(PickerOverlayComponent, null, portalInjector);\n        overlayRef.attach(calendarPortal);\n        overlayRef\n            .backdropClick()\n            .pipe(takeWhile(() => overlayConfig.shouldCloseOnBackdropClick))\n            .subscribe(() => overlayRef.dispose());\n        return overlayRef;\n    }\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    createOverlay(config) {\n        /** @type {?} */\n        const overlayConfig = this.getOverlayConfig(config);\n        return this.overlay.create(overlayConfig);\n    }\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    getOverlayConfig(config) {\n        /** @type {?} */\n        const positionStrategy = this.overlay\n            .position()\n            .flexibleConnectedTo(this.hostElemRef)\n            .withFlexibleDimensions(false)\n            .withViewportMargin(8)\n            .withDefaultOffsetY(12)\n            .withPositions([\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'top'\n            },\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'bottom'\n            },\n            {\n                originX: 'end',\n                originY: 'bottom',\n                overlayX: 'end',\n                overlayY: 'top'\n            },\n            {\n                originX: 'end',\n                originY: 'top',\n                overlayX: 'end',\n                overlayY: 'bottom'\n            }\n        ]);\n        /** @type {?} */\n        const overlayConfig = new OverlayConfig({\n            hasBackdrop: config.hasBackdrop,\n            backdropClass: config.backdropClass,\n            panelClass: config.panelClass,\n            scrollStrategy: this.overlay.scrollStrategies.block(),\n            positionStrategy\n        });\n        return overlayConfig;\n    }\n    /**\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    createInjector(overlayRef) {\n        /** @type {?} */\n        const injectionTokens = new WeakMap();\n        injectionTokens.set(OverlayRef, overlayRef);\n        return new PortalInjector(this.injector, injectionTokens);\n    }\n}\nCalendarOverlayService.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nCalendarOverlayService.ctorParameters = () => [\n    { type: Overlay },\n    { type: Injector }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass NgxMatDrpComponent {\n    /**\n     * @param {?} changeDetectionRef\n     * @param {?} calendarOverlayService\n     * @param {?} rangeStoreService\n     * @param {?} configStoreService\n     * @param {?} datePipe\n     */\n    constructor(changeDetectionRef, calendarOverlayService, rangeStoreService, configStoreService, datePipe) {\n        this.changeDetectionRef = changeDetectionRef;\n        this.calendarOverlayService = calendarOverlayService;\n        this.rangeStoreService = rangeStoreService;\n        this.configStoreService = configStoreService;\n        this.datePipe = datePipe;\n        this.selectedDateRangeChanged = new EventEmitter();\n        this.selectedDateRange = '';\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.configStoreService.ngxDrpOptions = this.options;\n        this.options.placeholder = this.options.placeholder || 'Choose a date';\n        this.rangeUpdate$ = this.rangeStoreService.rangeUpdate$.subscribe(range => {\n            /** @type {?} */\n            const from = this.formatToDateString(range.fromDate, this.options.format);\n            /** @type {?} */\n            const to = this.formatToDateString(range.toDate, this.options.format);\n            this.selectedDateRange = `${from} - ${to}`;\n            this.selectedDateRangeChanged.emit(range);\n        });\n        this.rangeStoreService.updateRange(this.options.range.fromDate, this.options.range.toDate);\n        this.changeDetectionRef.detectChanges();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.rangeUpdate$) {\n            this.rangeUpdate$.unsubscribe();\n        }\n    }\n    /**\n     * @param {?} date\n     * @param {?} format\n     * @return {?}\n     */\n    formatToDateString(date, format) {\n        return this.datePipe.transform(date, format);\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    openCalendar(event) {\n        /** @type {?} */\n        const overlayRef = this.calendarOverlayService.open(this.options.calendarOverlayConfig, this.calendarInput);\n    }\n    /**\n     * @param {?} range\n     * @return {?}\n     */\n    resetDates(range) {\n        this.rangeStoreService.updateRange(range.fromDate, range.toDate);\n    }\n}\nNgxMatDrpComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'ngx-mat-drp',\n                template: `<div> \n  \n  <mat-form-field class=\"ngx-mat-drp-date-display\">\n    <input class=\"ngx-mat-drp-date-input\"\n          matInput [placeholder]=\"options.placeholder\"\n          [value]=\"selectedDateRange\"\n          [matTooltip]=\"selectedDateRange\"\n          (click)=\"openCalendar($event)\"\n          readonly\n          #calendarInput >\n    <div matSuffix \n          class=\"ngx-mat-drp-calendar\"\n          (click)=\"openCalendar($event)\">\n    </div>\n  </mat-form-field>\n  \n</div>    \n`,\n                styles: [`.ngx-mat-drp-date-display{min-width:230px}.ngx-mat-drp-date-input{text-overflow:ellipsis;color:#4169e1}.ngx-mat-drp-calendar{background-image:url('data:image/svg+xml,<svg fill=\"#000000\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">    <path d=\"M9 11H7v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V9h14v11z\"/>    <path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>');width:24px;height:24px}`],\n                providers: [\n                    CalendarOverlayService,\n                    RangeStoreService,\n                    ConfigStoreService,\n                    DatePipe\n                ],\n                changeDetection: ChangeDetectionStrategy.OnPush\n            },] },\n];\n/** @nocollapse */\nNgxMatDrpComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: CalendarOverlayService },\n    { type: RangeStoreService },\n    { type: ConfigStoreService },\n    { type: DatePipe }\n];\nNgxMatDrpComponent.propDecorators = {\n    calendarInput: [{ type: ViewChild, args: ['calendarInput',] }],\n    selectedDateRangeChanged: [{ type: Output }],\n    options: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass CalendarWrapperComponent {\n    /**\n     * @param {?} configStore\n     */\n    constructor(configStore) {\n        this.configStore = configStore;\n        this.selectedDateChange = new EventEmitter();\n        this.weekendFilter = (d) => true;\n        this.dateFormat = configStore.ngxDrpOptions.format;\n        if (configStore.ngxDrpOptions.excludeWeekends) {\n            this.weekendFilter = (d) => {\n                /** @type {?} */\n                const day = d.getDay();\n                return day !== 0 && day !== 6;\n            };\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // Necessary to force view refresh\n        this.matCalendar.activeDate = changes[\"selectedDate\"].currentValue;\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    onSelectedChange(date) {\n        this.selectedDateChange.emit(date);\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    onYearSelected(e) { }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    onUserSelection(e) { }\n}\nCalendarWrapperComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'calendar-wrapper',\n                template: `<div>\n\n  <!-- <mat-divider></mat-divider> -->\n  <span class=\"ngx-mat-drp-date-label\">\n    <label>{{prefixLabel}}</label>\n    <label class=\"ngx-mat-drp-selected-date-label\">{{selectedDate | date:dateFormat}}</label>\n  </span>\n  <!-- <mat-divider></mat-divider> -->\n\n  <mat-calendar \n    [startAt]=\"selectedDate\"\n    [selected]=\"selectedDate\"\n    [minDate]=\"minDate\"\n    [maxDate]=\"maxDate\"\n    (selectedChange)=\"onSelectedChange($event)\"\n    (yearSelected)=\"onYearSelected($event)\"\n    (_userSelection)=\"onUserSelection($event)\"\n    [dateFilter]=\"weekendFilter\">\n  </mat-calendar>\n\n</div>`,\n                styles: [`.ngx-mat-drp-date-label{background:#fafafa;margin:15px;padding:4px 2px;width:100%;font-size:14px;font-weight:500}.ngx-mat-drp-selected-date-label{color:rgba(0,0,0,.38);padding-left:5%}`],\n                changeDetection: ChangeDetectionStrategy.OnPush\n            },] },\n];\n/** @nocollapse */\nCalendarWrapperComponent.ctorParameters = () => [\n    { type: ConfigStoreService }\n];\nCalendarWrapperComponent.propDecorators = {\n    matCalendar: [{ type: ViewChild, args: [MatCalendar,] }],\n    selectedDateChange: [{ type: Output }],\n    selectedDate: [{ type: Input }],\n    prefixLabel: [{ type: Input }],\n    minDate: [{ type: Input }],\n    maxDate: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass PresetsComponent {\n    constructor() {\n        this.presetChanged = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() { }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    setPresetPeriod(event) {\n        this.presetChanged.emit(event);\n    }\n}\nPresetsComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-drp-presets',\n                template: `<div>\n  <ul class=\"ngx-mat-drp-presets-list\">\n    <li *ngFor=\"let preset of presets\" (click)=\"setPresetPeriod(preset)\"> {{preset.presetLabel}} </li>\n  </ul>\n</div>`,\n                styles: [`.ngx-mat-drp-presets-list{list-style-type:none;margin:0;padding:0}.ngx-mat-drp-presets-list li{margin:5px 0;padding:4%;cursor:pointer;background:#fafafa;color:#3f51b5;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ngx-mat-drp-presets-list li:hover{background:#3f51b5;color:#fff}`],\n                changeDetection: ChangeDetectionStrategy.OnPush\n            },] },\n];\n/** @nocollapse */\nPresetsComponent.ctorParameters = () => [];\nPresetsComponent.propDecorators = {\n    presets: [{ type: Input }],\n    presetChanged: [{ type: Output }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nconst ɵ0 = new Date();\nclass NgxMatDrpModule {\n}\nNgxMatDrpModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule,\n                    MatFormFieldModule,\n                    MatDatepickerModule,\n                    MatNativeDateModule,\n                    MatInputModule,\n                    MatButtonModule,\n                    MatTooltipModule,\n                    OverlayModule\n                ],\n                declarations: [\n                    NgxMatDrpComponent,\n                    CalendarWrapperComponent,\n                    PickerOverlayComponent,\n                    PresetsComponent\n                ],\n                providers: [\n                    { provide: DATE, useValue: ɵ0 }\n                ],\n                entryComponents: [PickerOverlayComponent],\n                exports: [NgxMatDrpComponent]\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxMatDrpModule, NgxMatDrpComponent, PickerOverlayComponent, CalendarWrapperComponent, PresetsComponent, CalendarOverlayService, ConfigStoreService, DATE, RangeStoreService, pickerOverlayAnimations as ɵa };\n//# sourceMappingURL=ngx-mat-daterange-picker.js.map\n"],"sourceRoot":"webpack:///"}