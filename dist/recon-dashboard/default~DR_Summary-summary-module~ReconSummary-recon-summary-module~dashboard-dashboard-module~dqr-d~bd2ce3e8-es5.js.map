{"version":3,"sources":["node_modules/ngx-mat-daterange-picker/esm2015/ngx-mat-daterange-picker.js"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject, InjectionToken, Component, ViewEncapsulation, Injector, ViewChild, Output, EventEmitter, Input, ChangeDetectionStrategy, ChangeDetectorRef, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { animate, state, style, transition, trigger, group } from '@angular/animations';\nimport { OverlayRef, Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ComponentPortal, PortalInjector } from '@angular/cdk/portal';\nimport { takeWhile } from 'rxjs/operators';\nimport { DatePipe, CommonModule } from '@angular/common';\nimport { MatCalendar, MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst DATE = new InjectionToken('date');\nclass RangeStoreService {\n    /**\n     * @param {?} _fromDate\n     * @param {?} _toDate\n     */\n    constructor(_fromDate, _toDate) {\n        this._fromDate = _fromDate;\n        this._toDate = _toDate;\n        this.rangeUpdate$ = new Subject();\n    }\n    /**\n     * @return {?}\n     */\n    get fromDate() {\n        return this._fromDate;\n    }\n    /**\n     * @return {?}\n     */\n    get toDate() {\n        return this._toDate;\n    }\n    /**\n     * @param {?=} fromDate\n     * @param {?=} toDate\n     * @return {?}\n     */\n    updateRange(fromDate = this._fromDate, toDate = this._toDate) {\n        this._fromDate = fromDate;\n        this._toDate = toDate;\n        this.rangeUpdate$.next({ fromDate: this._fromDate, toDate: this._toDate });\n    }\n}\nRangeStoreService.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nRangeStoreService.ctorParameters = () => [\n    { type: Date, decorators: [{ type: Inject, args: [DATE,] }] },\n    { type: Date, decorators: [{ type: Inject, args: [DATE,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass ConfigStoreService {\n    constructor() {\n        this.defaultOptions = {\n            excludeWeekends: false,\n            animation: true,\n            locale: 'en-US',\n            fromMinMax: { fromDate: null, toDate: null },\n            toMinMax: { fromDate: null, toDate: null }\n        };\n    }\n    /**\n     * @return {?}\n     */\n    get ngxDrpOptions() {\n        return this._ngxDrpOptions;\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    set ngxDrpOptions(options) {\n        this._ngxDrpOptions = Object.assign({}, this.defaultOptions, options);\n    }\n}\nConfigStoreService.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nConfigStoreService.ctorParameters = () => [];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst pickerOverlayAnimations = {\n    /** Transforms the height of the picker overlay content. */\n    transformPanel: trigger('transformPickerOverlay', [\n        state('void', style({ opacity: 0, transform: 'scale(1, 0)' })),\n        state('enter', style({ opacity: 1, transform: 'scale(1, 1)' })),\n        transition('void => enter', group([\n            animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n        ])),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 })))\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass PickerOverlayComponent {\n    /**\n     * @param {?} rangeStoreService\n     * @param {?} configStoreService\n     * @param {?} overlayRef\n     */\n    constructor(rangeStoreService, configStoreService, overlayRef) {\n        this.rangeStoreService = rangeStoreService;\n        this.configStoreService = configStoreService;\n        this.overlayRef = overlayRef;\n        this.presets = [];\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.fromDate = this.rangeStoreService.fromDate;\n        this.toDate = this.rangeStoreService.toDate;\n        this.startDatePrefix = this.configStoreService.ngxDrpOptions.startDatePrefix || 'FROM:';\n        this.endDatePrefix = this.configStoreService.ngxDrpOptions.endDatePrefix || 'TO:';\n        this.applyLabel = this.configStoreService.ngxDrpOptions.applyLabel || 'Apply';\n        this.cancelLabel = this.configStoreService.ngxDrpOptions.cancelLabel || 'Cancel';\n        this.presets = this.configStoreService.ngxDrpOptions.presets;\n        this.shouldAnimate = this.configStoreService.ngxDrpOptions.animation\n            ? 'enter'\n            : 'noop';\n        ({\n            fromDate: this.fromMinDate,\n            toDate: this.fromMaxDate\n        } = this.configStoreService.ngxDrpOptions.fromMinMax);\n        ({\n            fromDate: this.toMinDate,\n            toDate: this.toMaxDate\n        } = this.configStoreService.ngxDrpOptions.toMinMax);\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    updateFromDate(date) {\n        this.fromDate = date;\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    updateToDate(date) {\n        this.toDate = date;\n    }\n    /**\n     * @param {?} presetItem\n     * @return {?}\n     */\n    updateRangeByPreset(presetItem) {\n        this.updateFromDate(presetItem.range.fromDate);\n        this.updateToDate(presetItem.range.toDate);\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    applyNewDates(e) {\n        this.rangeStoreService.updateRange(this.fromDate, this.toDate);\n        this.disposeOverLay();\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    discardNewDates(e) {\n        // this.rangeStoreService.updateRange();\n        this.disposeOverLay();\n    }\n    /**\n     * @return {?}\n     */\n    disposeOverLay() {\n        this.overlayRef.dispose();\n    }\n}\nPickerOverlayComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'ngx-mat-drp-picker-overlay',\n                template: `<div [@transformPickerOverlay]=\"shouldAnimate\" class=\"ngx-mat-drp-calendar-container\">\n\n  <div class=\"ngx-mat-drp-calendar-item\">\n    <calendar-wrapper \n    [prefixLabel]=\"startDatePrefix\"\n    [selectedDate]=\"fromDate\"\n    [minDate]=\"fromMinDate\"\n    [maxDate]=\"fromMaxDate\"\n    (selectedDateChange)=\"updateFromDate($event)\">\n  </calendar-wrapper>\n  </div>\n  <div class=\"ngx-mat-drp-calendar-item\">\n    <calendar-wrapper \n    [prefixLabel]=\"endDatePrefix\"\n    [selectedDate]=\"toDate\"\n    [minDate]=\"toMinDate\"\n    [maxDate]=\"toMaxDate\" \n    (selectedDateChange)=\"updateToDate($event)\">\n  </calendar-wrapper>\n  </div>\n  <div class=\"ngx-mat-drp-calendar-item\">\n    <div class=\"ngx-mat-drp-menu\">\n      <mat-drp-presets [presets]=\"presets\" (presetChanged)=\"updateRangeByPreset($event)\"></mat-drp-presets>\n      <div class=\"ngx-mat-drp-controls\">\n        <button mat-button color=\"primary\" (click)=\"applyNewDates($event)\">{{applyLabel}}</button>\n        <button mat-button (click)=\"discardNewDates($event)\">{{cancelLabel}}</button>\n      </div>\n    </div>\n  </div>\n</div>\n`,\n                styles: [`.ngx-mat-drp-calendar-container{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-pack:distribute;justify-content:space-around;min-width:650px;height:300px}.ngx-mat-drp-calendar-item{-ms-flex-preferred-size:33.33%;flex-basis:33.33%;min-width:210px;padding:1em;font-family:Roboto,\"Helvetica Neue\",sans-serif;font-size:14px;font-weight:400}.ngx-mat-drp-menu{height:100%}.ngx-mat-drp-controls{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-pack:distribute;justify-content:space-around;margin:10% auto}.ngx-mat-drp-overlay{-webkit-box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);background:#fff;border-radius:2px}.ngx-mat-drp-overlay-backdrop{background-color:rgba(0,0,0,.2);opacity:.2}`],\n                animations: [pickerOverlayAnimations.transformPanel],\n                encapsulation: ViewEncapsulation.None\n            },] },\n];\n/** @nocollapse */\nPickerOverlayComponent.ctorParameters = () => [\n    { type: RangeStoreService },\n    { type: ConfigStoreService },\n    { type: OverlayRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst DEFAULT_CONFIG = {\n    panelClass: 'ngx-mat-drp-overlay',\n    hasBackdrop: true,\n    backdropClass: 'ngx-mat-drp-overlay-backdrop',\n    shouldCloseOnBackdropClick: true\n};\nclass CalendarOverlayService {\n    /**\n     * @param {?} overlay\n     * @param {?} injector\n     */\n    constructor(overlay, injector) {\n        this.overlay = overlay;\n        this.injector = injector;\n    }\n    /**\n     * @param {?=} config\n     * @param {?=} hostElemRef\n     * @return {?}\n     */\n    open(config = {}, hostElemRef) {\n        this.hostElemRef = hostElemRef;\n        /** @type {?} */\n        const overlayConfig = Object.assign({}, DEFAULT_CONFIG, config);\n        /** @type {?} */\n        const overlayRef = this.createOverlay(overlayConfig);\n        /** @type {?} */\n        const portalInjector = this.createInjector(overlayRef);\n        /** @type {?} */\n        const calendarPortal = new ComponentPortal(PickerOverlayComponent, null, portalInjector);\n        overlayRef.attach(calendarPortal);\n        overlayRef\n            .backdropClick()\n            .pipe(takeWhile(() => overlayConfig.shouldCloseOnBackdropClick))\n            .subscribe(() => overlayRef.dispose());\n        return overlayRef;\n    }\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    createOverlay(config) {\n        /** @type {?} */\n        const overlayConfig = this.getOverlayConfig(config);\n        return this.overlay.create(overlayConfig);\n    }\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    getOverlayConfig(config) {\n        /** @type {?} */\n        const positionStrategy = this.overlay\n            .position()\n            .flexibleConnectedTo(this.hostElemRef)\n            .withFlexibleDimensions(false)\n            .withViewportMargin(8)\n            .withDefaultOffsetY(12)\n            .withPositions([\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'top'\n            },\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'bottom'\n            },\n            {\n                originX: 'end',\n                originY: 'bottom',\n                overlayX: 'end',\n                overlayY: 'top'\n            },\n            {\n                originX: 'end',\n                originY: 'top',\n                overlayX: 'end',\n                overlayY: 'bottom'\n            }\n        ]);\n        /** @type {?} */\n        const overlayConfig = new OverlayConfig({\n            hasBackdrop: config.hasBackdrop,\n            backdropClass: config.backdropClass,\n            panelClass: config.panelClass,\n            scrollStrategy: this.overlay.scrollStrategies.block(),\n            positionStrategy\n        });\n        return overlayConfig;\n    }\n    /**\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    createInjector(overlayRef) {\n        /** @type {?} */\n        const injectionTokens = new WeakMap();\n        injectionTokens.set(OverlayRef, overlayRef);\n        return new PortalInjector(this.injector, injectionTokens);\n    }\n}\nCalendarOverlayService.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nCalendarOverlayService.ctorParameters = () => [\n    { type: Overlay },\n    { type: Injector }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass NgxMatDrpComponent {\n    /**\n     * @param {?} changeDetectionRef\n     * @param {?} calendarOverlayService\n     * @param {?} rangeStoreService\n     * @param {?} configStoreService\n     * @param {?} datePipe\n     */\n    constructor(changeDetectionRef, calendarOverlayService, rangeStoreService, configStoreService, datePipe) {\n        this.changeDetectionRef = changeDetectionRef;\n        this.calendarOverlayService = calendarOverlayService;\n        this.rangeStoreService = rangeStoreService;\n        this.configStoreService = configStoreService;\n        this.datePipe = datePipe;\n        this.selectedDateRangeChanged = new EventEmitter();\n        this.selectedDateRange = '';\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.configStoreService.ngxDrpOptions = this.options;\n        this.options.placeholder = this.options.placeholder || 'Choose a date';\n        this.rangeUpdate$ = this.rangeStoreService.rangeUpdate$.subscribe(range => {\n            /** @type {?} */\n            const from = this.formatToDateString(range.fromDate, this.options.format);\n            /** @type {?} */\n            const to = this.formatToDateString(range.toDate, this.options.format);\n            this.selectedDateRange = `${from} - ${to}`;\n            this.selectedDateRangeChanged.emit(range);\n        });\n        this.rangeStoreService.updateRange(this.options.range.fromDate, this.options.range.toDate);\n        this.changeDetectionRef.detectChanges();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.rangeUpdate$) {\n            this.rangeUpdate$.unsubscribe();\n        }\n    }\n    /**\n     * @param {?} date\n     * @param {?} format\n     * @return {?}\n     */\n    formatToDateString(date, format) {\n        return this.datePipe.transform(date, format);\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    openCalendar(event) {\n        /** @type {?} */\n        const overlayRef = this.calendarOverlayService.open(this.options.calendarOverlayConfig, this.calendarInput);\n    }\n    /**\n     * @param {?} range\n     * @return {?}\n     */\n    resetDates(range) {\n        this.rangeStoreService.updateRange(range.fromDate, range.toDate);\n    }\n}\nNgxMatDrpComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'ngx-mat-drp',\n                template: `<div> \n  \n  <mat-form-field class=\"ngx-mat-drp-date-display\">\n    <input class=\"ngx-mat-drp-date-input\"\n          matInput [placeholder]=\"options.placeholder\"\n          [value]=\"selectedDateRange\"\n          [matTooltip]=\"selectedDateRange\"\n          (click)=\"openCalendar($event)\"\n          readonly\n          #calendarInput >\n    <div matSuffix \n          class=\"ngx-mat-drp-calendar\"\n          (click)=\"openCalendar($event)\">\n    </div>\n  </mat-form-field>\n  \n</div>    \n`,\n                styles: [`.ngx-mat-drp-date-display{min-width:230px}.ngx-mat-drp-date-input{text-overflow:ellipsis;color:#4169e1}.ngx-mat-drp-calendar{background-image:url('data:image/svg+xml,<svg fill=\"#000000\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">    <path d=\"M9 11H7v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V9h14v11z\"/>    <path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>');width:24px;height:24px}`],\n                providers: [\n                    CalendarOverlayService,\n                    RangeStoreService,\n                    ConfigStoreService,\n                    DatePipe\n                ],\n                changeDetection: ChangeDetectionStrategy.OnPush\n            },] },\n];\n/** @nocollapse */\nNgxMatDrpComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: CalendarOverlayService },\n    { type: RangeStoreService },\n    { type: ConfigStoreService },\n    { type: DatePipe }\n];\nNgxMatDrpComponent.propDecorators = {\n    calendarInput: [{ type: ViewChild, args: ['calendarInput',] }],\n    selectedDateRangeChanged: [{ type: Output }],\n    options: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass CalendarWrapperComponent {\n    /**\n     * @param {?} configStore\n     */\n    constructor(configStore) {\n        this.configStore = configStore;\n        this.selectedDateChange = new EventEmitter();\n        this.weekendFilter = (d) => true;\n        this.dateFormat = configStore.ngxDrpOptions.format;\n        if (configStore.ngxDrpOptions.excludeWeekends) {\n            this.weekendFilter = (d) => {\n                /** @type {?} */\n                const day = d.getDay();\n                return day !== 0 && day !== 6;\n            };\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // Necessary to force view refresh\n        this.matCalendar.activeDate = changes[\"selectedDate\"].currentValue;\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    onSelectedChange(date) {\n        this.selectedDateChange.emit(date);\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    onYearSelected(e) { }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    onUserSelection(e) { }\n}\nCalendarWrapperComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'calendar-wrapper',\n                template: `<div>\n\n  <!-- <mat-divider></mat-divider> -->\n  <span class=\"ngx-mat-drp-date-label\">\n    <label>{{prefixLabel}}</label>\n    <label class=\"ngx-mat-drp-selected-date-label\">{{selectedDate | date:dateFormat}}</label>\n  </span>\n  <!-- <mat-divider></mat-divider> -->\n\n  <mat-calendar \n    [startAt]=\"selectedDate\"\n    [selected]=\"selectedDate\"\n    [minDate]=\"minDate\"\n    [maxDate]=\"maxDate\"\n    (selectedChange)=\"onSelectedChange($event)\"\n    (yearSelected)=\"onYearSelected($event)\"\n    (_userSelection)=\"onUserSelection($event)\"\n    [dateFilter]=\"weekendFilter\">\n  </mat-calendar>\n\n</div>`,\n                styles: [`.ngx-mat-drp-date-label{background:#fafafa;margin:15px;padding:4px 2px;width:100%;font-size:14px;font-weight:500}.ngx-mat-drp-selected-date-label{color:rgba(0,0,0,.38);padding-left:5%}`],\n                changeDetection: ChangeDetectionStrategy.OnPush\n            },] },\n];\n/** @nocollapse */\nCalendarWrapperComponent.ctorParameters = () => [\n    { type: ConfigStoreService }\n];\nCalendarWrapperComponent.propDecorators = {\n    matCalendar: [{ type: ViewChild, args: [MatCalendar,] }],\n    selectedDateChange: [{ type: Output }],\n    selectedDate: [{ type: Input }],\n    prefixLabel: [{ type: Input }],\n    minDate: [{ type: Input }],\n    maxDate: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass PresetsComponent {\n    constructor() {\n        this.presetChanged = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() { }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    setPresetPeriod(event) {\n        this.presetChanged.emit(event);\n    }\n}\nPresetsComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-drp-presets',\n                template: `<div>\n  <ul class=\"ngx-mat-drp-presets-list\">\n    <li *ngFor=\"let preset of presets\" (click)=\"setPresetPeriod(preset)\"> {{preset.presetLabel}} </li>\n  </ul>\n</div>`,\n                styles: [`.ngx-mat-drp-presets-list{list-style-type:none;margin:0;padding:0}.ngx-mat-drp-presets-list li{margin:5px 0;padding:4%;cursor:pointer;background:#fafafa;color:#3f51b5;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ngx-mat-drp-presets-list li:hover{background:#3f51b5;color:#fff}`],\n                changeDetection: ChangeDetectionStrategy.OnPush\n            },] },\n];\n/** @nocollapse */\nPresetsComponent.ctorParameters = () => [];\nPresetsComponent.propDecorators = {\n    presets: [{ type: Input }],\n    presetChanged: [{ type: Output }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nconst ɵ0 = new Date();\nclass NgxMatDrpModule {\n}\nNgxMatDrpModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule,\n                    MatFormFieldModule,\n                    MatDatepickerModule,\n                    MatNativeDateModule,\n                    MatInputModule,\n                    MatButtonModule,\n                    MatTooltipModule,\n                    OverlayModule\n                ],\n                declarations: [\n                    NgxMatDrpComponent,\n                    CalendarWrapperComponent,\n                    PickerOverlayComponent,\n                    PresetsComponent\n                ],\n                providers: [\n                    { provide: DATE, useValue: ɵ0 }\n                ],\n                entryComponents: [PickerOverlayComponent],\n                exports: [NgxMatDrpComponent]\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxMatDrpModule, NgxMatDrpComponent, PickerOverlayComponent, CalendarWrapperComponent, PresetsComponent, CalendarOverlayService, ConfigStoreService, DATE, RangeStoreService, pickerOverlayAnimations as ɵa };\n//# sourceMappingURL=ngx-mat-daterange-picker.js.map\n"],"sourceRoot":"webpack:///","file":"default~DR_Summary-summary-module~ReconSummary-recon-summary-module~dashboard-dashboard-module~dqr-d~bd2ce3e8-es5.js"}